
import pandas as pd 

from datetime import date
import datetime

import time

import requests
import os

# -- make sure messychart in path
import sys
sys.path.append("/home/runner/Messari-Reports/scripts/messycharts/")

from messycharts import messychart

report_title = 'token-terminal'

filepath_chart = '/home/runner/Messari-Reports/charts/' + report_title.lower() + '/'
filepath_data =  '/home/runner/Messari-Reports/data/'   + report_title.lower() + '/'

today = date.today()
today_str = today.strftime("%Y-%m-%d")

date_ranges = [30,90,180,365, 999]

# -- load data 
protocol_df = pd.read_csv(filepath_data + 'tokenTerminal_protocols.csv')  

# =========
# =======================================
# --- CHART CODE ================================
# =======================================
# =========


# =================================
# -- rename protocol function 
# =================================
def rename_protocols(proto_list):
  replace_names = {
    'Ethereum Name Service': 'ENS',
    'Decentral Games': 'DG',
    'yearn.finance': 'Yearn'
  }

  new_index = []

  # -- fix index 
  for p in proto_list:
    p = replace_names[p] if  p in replace_names.keys() else p

    p = p.split(' Finance')[0]

    new_index.append(p)

  # -- return 
  return new_index


# =================================
# -- Top Revenue Movers - Absolute Number - category bar 
# =================================

days = 30 
field = 'revenue'
plot_count = 10

exclude_tags = 'Blockchain'

# -- filter df and exclude blockchain tag 
plot_df = protocol_df[~protocol_df['tags'].str.contains(exclude_tags)].groupby(['date', 'project'])[field].sum().unstack()

# -- sort df with largest chains first
new_cols = list(plot_df.iloc[(-1*days)::].sum().sort_values(ascending = False).index)
plot_df = plot_df[new_cols[:plot_count]]

# -- calculate rolling rev 
plot_df = plot_df.fillna(0).rolling(days).sum().iloc[-1].to_frame()

# -- clean protocol names 
plot_df.index = rename_protocols(plot_df.index)

# -- compute percent diff between 1 and 2 for the subtitle 
p = plot_df.index[0]
v = (plot_df.iloc[0][0] - plot_df.iloc[1][0]) / plot_df.iloc[1][0]
v = "{0:.0%}".format(v)

# -- intialize chart object 
chart = messychart(plot_df)

# -- define titles 
chart.title = 'Top 10 Revenue Earning Protocols'
chart.subtitle = f"{p} has out earned the second highest grossing protocol by {v} over last {days} days" 
chart.source = 'Messari, Token Terminal'
chart.note = 'Only application protocols accounted for. Base chains excluded'

#chart.filepath = './output/top-revenue-protocols-' + str(days) 
chart.filepath = filepath_chart +'/top-movers/' + 'top10-bar-' + str(30)

# -- print chart 
chart.create_slide(chart_type = 'bar_category', axis_title= str(days) +'d Total Revenue', yaxis_data_type = 'dollar', legend_layout = 'None')


# =================================
# -- Top Revenue Movers - Absolute Number - area chart 
# =================================

days = 30 
field = 'revenue'
plot_count = 9

exclude_tags = 'Blockchain'

# -- filter df and exclude blockchain tag 
plot_df = protocol_df[~protocol_df['tags'].str.contains(exclude_tags)].groupby(['date', 'project'])[field].sum().unstack()

# -- sort df with largest chains first
new_cols = list(plot_df.iloc[(-1*days)::].sum().sort_values(ascending = False).index)
plot_df = plot_df[new_cols[:plot_count]]

# -- calculate rolling rev 
plot_df = plot_df.fillna(0).rolling(days).sum()

# -- clean column names 
plot_df.columns = rename_protocols(plot_df.columns)

# -- save off 
plot_df_ = plot_df

# -- compute subtitle 
p = plot_df.columns[0]
v = plot_df[p].iloc[-1] / plot_df.iloc[-1].sum()
v = "{0:.0%}".format(v)

# -- limit view 
plot_df = plot_df_.iloc[-180::]

# -- intialize chart object 
chart = messychart(plot_df)

# -- define titles 
chart.title = 'Top 30d Revenue Generating Protocols '
chart.subtitle = f"{p} has accounted for {v} of the 30d revenue generated by the top 10 earning app protocols" 
chart.source = 'Messari, Token Terminal'
chart.note = 'Revenue figures presented as trailing 30d revenue totals and plotted as 7d moving average'

# -- define filepath 
chart.filepath = filepath_chart +'/top-movers/' + 'top10-area-' + str(30)

# -- plot 
chart.create_slide(chart_type = 'area', 
                    axis_title= '30d Total Revenue',          # -- define y axis title 
                    yaxis_data_type = 'dollar',       # -- defines the type: can be ['numeric', 'dollar', 'percent']. default is numeric 
                    legend_layout = 'right_values',   # -- defines the legend style and placement. options are ['bottom', 'right', 'right_values', 'None']
                    legend_title='30d Revenue', # -- defines legend title - only use with the "right" or "right_values" options 
                    calc_days = 30,
                    digits=1)   



# =================================
# -- Top Revenue Movers - 100% Rev Share - area chart 
# =================================

for date_range in date_ranges.remove(30): 
  # -- filter dataframe 
  if date_range > 900: 
    date_range = 'all'
    plot_df =  plot_df_.div(plot_df.sum(axis=1), axis=0) 
  else: 
    plot_df =  plot_df_.div(plot_df.sum(axis=1), axis=0).iloc[(-1 * date_range)::]

  # -- intialize chart object 
  chart = messychart(plot_df)

  # -- define titles 
  chart.title = 'Application Protocol 30d Revenue Share Over Time'
  chart.subtitle = f"{p} has accounted for {v} of the 30d revenue generated by the top 10 earning app protocols" 
  chart.source = 'Messari, Token Terminal'
  chart.note = 'Revenue share computed with rolling 30d total revenue'

  # -- define filepath 
  chart.filepath = filepath_chart +'/top-movers/' + 'top10-revShare-area-' + str(date_range) + '-rhv'

  # -- plot 
  chart.create_slide(chart_type = 'area', 
                      axis_title= 'Total Revenue Share of Top 10 Protocols',          # -- define y axis title 
                      yaxis_data_type = 'percent',       # -- defines the type: can be ['numeric', 'dollar', 'percent']. default is numeric 
                      legend_layout = 'right_values',   # -- defines the legend style and placement. options are ['bottom', 'right', 'right_values', 'None']
                      legend_title='Top 10 Rev Share', # -- defines legend title - only use with the "right" or "right_values" options 
                      calc_days = 30,
                      digits=0)   


# =================================
# -- Top Revenue Movers - Percent Change Increase 
# =================================

rev_chg_periods = [7, 14, 30]
fields = ['revenue', 'revenue_protocol']

field_mapping = {
  'revenue': 'Total Revenue', 
  'revenue_protocol': 'Protocol Revenue'
}

for field in fields:  
  for rev_chg_period in rev_chg_periods: 
    # -- filter df and exclude blockchain tag 
    plot_df = protocol_df[~protocol_df['tags'].str.contains(exclude_tags)].groupby(['date', 'project'])[field].sum().unstack()

    # -- make 7d revenue 
    plot_df = plot_df.rolling(rev_chg_period).sum()

    # -- make percent change 
    plot_df = plot_df.pct_change(rev_chg_period)

    # -- sort by highest percent change 
    new_cols = list(plot_df.iloc[(-1)::].sum().sort_values(ascending = False).index)
    plot_df = plot_df[new_cols]

    # -- drop too big changes 
    if plot_df[plot_df.columns[0]].iloc[-1] > 100:
      print('dropped ' + plot_df.columns[0] )
      new_cols.remove(plot_df.columns[0])
      plot_df.drop(columns=[plot_df.columns[0]], inplace=True)

    # -- limit to top 10 
    plot_df = plot_df[new_cols[:10]]

    # -- adjust protocol names 
    plot_df.columns = rename_protocols(plot_df.columns)

    # -- generate subtitle 
    p = plot_df.columns[0]
    v = plot_df[p].iloc[-1]
    v = "{0:.0%}".format(v)

    # -- intialize chart object 
    chart = messychart(plot_df.iloc[-1])

    field_text = field_mapping[field]
    field_text_lower = field_text.lower() if field_text != 'TVL' else field_text

    # -- define titles 
    chart.title = 'Top 10 Largest Increases in ' + str(rev_chg_period) + 'd ' + field_text 
    chart.subtitle = f"{p} has seen a {v} increase in {field_text_lower} over the last {rev_chg_period} days" 
    chart.source = 'Messari, Token Terminal'
    chart.note = 'Only application protocols accounted for. Base chains excluded'

    # -- lower chart on slide 
    chart.chart_yloc = 80

    #chart.filepath = './output/top-revenue-protocols-percent-' + str(days) 
    chart.filepath = filepath_chart +'/top-movers/' + 'top10-percent-' + field + '-' + str(rev_chg_period)

    # -- print chart 
    chart.create_slide(chart_type = 'bar_category', axis_title= str(rev_chg_period) +'d Total Revenue', yaxis_data_type = 'percent', legend_layout = 'None')



# =================================
# -- Top Revenue Movers - Percent Change Decrease
# =================================

rev_chg_periods = [7, 14, 30]
fields = ['revenue', 'revenue_protocol']

field_mapping = {
  'revenue': 'Total Revenue', 
  'revenue_protocol': 'Protocol Revenue'
}

for field in fields:  
  for rev_chg_period in rev_chg_periods: 
    # -- filter df and exclude blockchain tag 
    plot_df = protocol_df[~protocol_df['tags'].str.contains(exclude_tags)].groupby(['date', 'project'])[field].sum().unstack()

    # -- make 7d revenue 
    plot_df = plot_df.rolling(rev_chg_period).sum()

    # -- make percent change 
    plot_df = plot_df.pct_change(rev_chg_period)

    # -- sort by highest percent change 
    new_cols = list(plot_df.iloc[(-1)::].sum().sort_values(ascending = True).index)
    plot_df = plot_df[new_cols]

    # -- drop too big changes 
    if plot_df[plot_df.columns[0]].iloc[-1] > 100:
      print('dropped ' + plot_df.columns[0] )
      new_cols.remove(plot_df.columns[0])
      plot_df.drop(columns=[plot_df.columns[0]], inplace=True)

    # -- limit to top 10 
    plot_df = plot_df[new_cols[:10]]

    # -- adjust protocol names 
    plot_df.columns = rename_protocols(plot_df.columns)

    # -- generate subtitle 
    p = plot_df.columns[0]
    v = plot_df[p].iloc[-1]
    v = "{0:.0%}".format(v)

    # -- intialize chart object 
    chart = messychart(plot_df.iloc[-1])

    field_text = field_mapping[field]

    # -- define titles 
    chart.title = 'Top 10 Largest Declines in ' + str(rev_chg_period) + 'd ' + field_text 
    chart.subtitle = f"{p} has seen a {v} decline in {field_text_lower} over the last {rev_chg_period} days" 
    chart.source = 'Messari, Token Terminal'
    chart.note = 'Only application protocols accounted for. Base chains excluded'

    # -- lower chart on slide 
    chart.chart_yloc = 80

    chart.filepath = filepath_chart +'/top-movers/' + 'top10-percent-decline-' + field + '-' + str(rev_chg_period)

    # -- print chart 
    chart.create_slide(chart_type = 'bar_category', axis_title= str(rev_chg_period) +'d Total Revenue', yaxis_data_type = 'percent', legend_layout = 'None')
